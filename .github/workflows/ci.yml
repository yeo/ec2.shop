name: CI

on:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'master'

jobs:
  build-docker:
    runs-on: ubuntu-latest
    outputs:
      deploy: ${{ steps.set-output.outputs.DEPLOY }}
      image_tag: ${{ steps.set-output.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            yeospace/ec2shop
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,latest
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        id: build-push
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set output
        id: set-output
        run: |
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "DEPLOY=1" >> "$GITHUB_OUTPUT"
            echo "IMAGE_TAG=$(echo $DOCKER_METADATA_OUTPUT_TAGS | awk '{print $NF}')" >> "$GITHUB_OUTPUT"
            echo $DOCKER_METADATA_OUTPUT_TAGS | awk '{print $NF}'
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: ${{ needs.build-docker.outputs.deploy == '1' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy image to k8s
        run: |
          export rev=$(echo ${{ needs.build-docker.outputs.image_tag}} | awk -F: '{print $2}')
          envsubst < k8s/deployment.yaml
          #| kubectl apply -f -
